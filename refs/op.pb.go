// Code generated by protoc-gen-go.
// source: op.proto
// DO NOT EDIT!

/*
Package refs is a generated protocol buffer package.

It is generated from these files:
	op.proto

It has these top-level messages:
	Oplog
*/
package refs

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Oplog struct {
	Ops              []*Oplog_Op `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	ObjPack          []byte      `protobuf:"bytes,16,opt,name=obj_pack" json:"obj_pack,omitempty"`
	Objs             [][]byte    `protobuf:"bytes,17,rep,name=objs" json:"objs,omitempty"`
	Params           []string    `protobuf:"bytes,18,rep,name=params" json:"params,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Oplog) Reset()         { *m = Oplog{} }
func (m *Oplog) String() string { return proto.CompactTextString(m) }
func (*Oplog) ProtoMessage()    {}

func (m *Oplog) GetOps() []*Oplog_Op {
	if m != nil {
		return m.Ops
	}
	return nil
}

func (m *Oplog) GetObjPack() []byte {
	if m != nil {
		return m.ObjPack
	}
	return nil
}

func (m *Oplog) GetObjs() [][]byte {
	if m != nil {
		return m.Objs
	}
	return nil
}

func (m *Oplog) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Oplog_Op struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Target           []byte  `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	OldTarget        []byte  `protobuf:"bytes,3,opt,name=old_target" json:"old_target,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Oplog_Op) Reset()         { *m = Oplog_Op{} }
func (m *Oplog_Op) String() string { return proto.CompactTextString(m) }
func (*Oplog_Op) ProtoMessage()    {}

func (m *Oplog_Op) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Oplog_Op) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Oplog_Op) GetOldTarget() []byte {
	if m != nil {
		return m.OldTarget
	}
	return nil
}
