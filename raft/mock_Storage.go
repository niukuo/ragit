// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package raft

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	raftpb "go.etcd.io/etcd/raft/raftpb"

	refs "github.com/niukuo/ragit/refs"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// Describe provides a mock function with given fields: w
func (_m *MockStorage) Describe(w io.Writer) {
	_m.Called(w)
}

// Entries provides a mock function with given fields: lo, hi, maxSize
func (_m *MockStorage) Entries(lo uint64, hi uint64, maxSize uint64) ([]raftpb.Entry, error) {
	ret := _m.Called(lo, hi, maxSize)

	var r0 []raftpb.Entry
	if rf, ok := ret.Get(0).(func(uint64, uint64, uint64) []raftpb.Entry); ok {
		r0 = rf(lo, hi, maxSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]raftpb.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64, uint64) error); ok {
		r1 = rf(lo, hi, maxSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstIndex provides a mock function with given fields:
func (_m *MockStorage) FirstIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMemberURLs provides a mock function with given fields:
func (_m *MockStorage) GetAllMemberURLs() (map[refs.PeerID][]string, error) {
	ret := _m.Called()

	var r0 map[refs.PeerID][]string
	if rf, ok := ret.Get(0).(func() map[refs.PeerID][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[refs.PeerID][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRefs provides a mock function with given fields:
func (_m *MockStorage) GetAllRefs() (map[string]refs.Hash, error) {
	ret := _m.Called()

	var r0 map[string]refs.Hash
	if rf, ok := ret.Get(0).(func() map[string]refs.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]refs.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfState provides a mock function with given fields:
func (_m *MockStorage) GetConfState() (*raftpb.ConfState, error) {
	ret := _m.Called()

	var r0 *raftpb.ConfState
	if rf, ok := ret.Get(0).(func() *raftpb.ConfState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raftpb.ConfState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInitState provides a mock function with given fields:
func (_m *MockStorage) GetInitState() (*InitialState, error) {
	ret := _m.Called()

	var r0 *InitialState
	if rf, ok := ret.Get(0).(func() *InitialState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitialState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeaderTerm provides a mock function with given fields:
func (_m *MockStorage) GetLeaderTerm() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetURLsByMemberID provides a mock function with given fields: id
func (_m *MockStorage) GetURLsByMemberID(id refs.PeerID) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(refs.PeerID) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(refs.PeerID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitialState provides a mock function with given fields:
func (_m *MockStorage) InitialState() (raftpb.HardState, raftpb.ConfState, error) {
	ret := _m.Called()

	var r0 raftpb.HardState
	if rf, ok := ret.Get(0).(func() raftpb.HardState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raftpb.HardState)
	}

	var r1 raftpb.ConfState
	if rf, ok := ret.Get(1).(func() raftpb.ConfState); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(raftpb.ConfState)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LastIndex provides a mock function with given fields:
func (_m *MockStorage) LastIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnConfIndexChange provides a mock function with given fields: confIndex
func (_m *MockStorage) OnConfIndexChange(confIndex uint64) {
	_m.Called(confIndex)
}

// Save provides a mock function with given fields: hardState, entries
func (_m *MockStorage) Save(hardState raftpb.HardState, entries []raftpb.Entry) error {
	ret := _m.Called(hardState, entries)

	var r0 error
	if rf, ok := ret.Get(0).(func(raftpb.HardState, []raftpb.Entry) error); ok {
		r0 = rf(hardState, entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snapshot provides a mock function with given fields:
func (_m *MockStorage) Snapshot() (raftpb.Snapshot, error) {
	ret := _m.Called()

	var r0 raftpb.Snapshot
	if rf, ok := ret.Get(0).(func() raftpb.Snapshot); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raftpb.Snapshot)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Term provides a mock function with given fields: i
func (_m *MockStorage) Term(i uint64) (uint64, error) {
	ret := _m.Called(i)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
